1️⃣ TCP Server (C++)
#include <iostream>
#include <fstream>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <cstring>
using namespace std;

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};

    // 1. Create socket
    server_fd = socket(AF_INET, SOCK_STREAM, 0);

    // 2. Bind
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(8080);
    bind(server_fd, (struct sockaddr*)&address, sizeof(address));

    // 3. Listen
    listen(server_fd, 3);
    cout << "Server waiting for connection..." << endl;

    // 4. Accept
    new_socket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen);

    // ** Part a: Say Hello **
    read(new_socket, buffer, 1024);
    cout << "Client: " << buffer << endl;
    send(new_socket, "Hello from Server", 17, 0);

    // ** Part b: File Transfer **
    cout << "Receiving file from client..." << endl;
    ofstream outfile("received_file.txt", ios::binary);
    int n;
    while((n = read(new_socket, buffer, 1024)) > 0) {
        outfile.write(buffer, n);
        if(n < 1024) break; // last chunk
    }
    outfile.close();
    cout << "File received successfully!" << endl;

    // 5. Close
    close(new_socket);
    close(server_fd);
    return 0;
}

2️⃣TCP Client (C++)
#include <iostream>
#include <fstream>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <cstring>
using namespace std;

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char buffer[1024] = {0};

    // 1. Create socket
    sock = socket(AF_INET, SOCK_STREAM, 0);

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(8080);
    inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr);

    // 2. Connect
    connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr));

    // ** Part a: Say Hello **
    send(sock, "Hello from Client", 17, 0);
    read(sock, buffer, 1024);
    cout << "Server: " << buffer << endl;

    // ** Part b: File Transfer **
    cout << "Sending file to server..." << endl;
    ifstream infile("send_file.txt", ios::binary);
    while(!infile.eof()) {
        infile.read(buffer, 1024);
        send(sock, buffer, infile.gcount(), 0);
    }
    infile.close();
    cout << "File sent successfully!" << endl;

    // 3. Close
    close(sock);
    return 0;
}
